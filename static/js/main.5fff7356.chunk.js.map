{"version":3,"sources":["components/Navigation.jsx","components/Footer.jsx","components/Audio.jsx","components/Home/Home.jsx","components/WinningMessage.jsx","components/Slider/SliderBoard.jsx","components/Slider/helpers.js","actions/index.js","components/Timer/helper.js","components/Timer/Timer.jsx","components/Slider/Slider.jsx","components/Memo/MemoPiece.jsx","components/Memo/MemoBoard.jsx","components/Memo/helpers.js","components/Memo/Memo.jsx","components/Bark/helpers.js","components/Bark/BarkPiece.jsx","components/Bark/BarkBoard.jsx","components/Bark/Bark.jsx","components/Page404.jsx","App.js","reducers/helpers.js","reducers/index.js","index.js"],"names":["Navigation","to","Footer","href","Audio2","useState","currentlyPlaying","setCurrentlyPlaying","playNext","next","audio","document","getElementById","src","process","play","onended","event","a","id","controls","type","Home","className","WinningMessage","props","onClick","handleClose","timeWhenStopped","SliderBoard","pieces","map","piece","movePiece","alt","newSeqNoR","length","arr","Array","keys","arrCopy","slice","newArr","i","randomIndex","Math","floor","random","push","splice","isSolvable","order","index","indexOf","orderCopy","totalInversions","startTimer","stopTimer","addPoints","points","payload","formatTime","hours","minutes","seconds","Timer","state","time0","calculateTime","timeNow","msPassed","setState","setTime","time","setTime0","Date","getTime","getTimeNow","timeInterval","setInterval","clearInterval","getTWS","componentWillUnmount","oldProps","newProps","this","Component","connect","resetTimer","sequence","setSequence","isGameOn","setIsGameOn","setTimeWhenStopped","moves","setMoves","isGameWon","setIsGameWon","newSequence","array","reduce","sum","thisElement","shuffle","innerHTML","spot","newOrder","JSON","stringify","checkIfGameWon","MemoPiece","Fragment","onFlip","MemoBoard","handleFlip","querySelector","classList","add","flipPiece","randomize","forEach","element","setPieces","flipped","setFlipped","pairsLeft","setPairsLeft","concat","Object","entries","constructor","setTimeout","remove","error","console","log","playBark","Audio","addClassPlaying","removeClassPlaying","BarkPiece","click","BarkBoard","handleClick","board","setBoard","setOrder","isPlaying","setIsPlaying","playElement","playOrder","newBoard","nextRound","Page404","App","exact","path","component","Slider","Memo","Bark","j","combineReducers","action","level","orderSlider","currentOrder","boardSizeMemo","gameSize","size","orderMemo","pairMemo","pair","orderBark","guessedSeqBark","guess","ReactDOM","render","store","createStore","reducers"],"mappings":"qOAqBeA,EAlBI,WACjB,OACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,UAAT,sBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,0BCJKC,EARA,WACb,OACE,+CACW,mBAAGC,KAAK,2BAAR,0C,gCCiCAC,EApCA,WAAO,IAAD,EAC6BC,mBAAS,GADtC,mBACZC,EADY,KACMC,EADN,KAGbC,EAAW,SAAXA,IACJ,IAAIC,EACAH,EAAmB,EACrBG,EAAOH,EAAmB,GAE1BG,EAAO,EACPF,EAAoB,IAEtBA,EAAoBE,GACpB,IAAMC,EAAQC,SAASC,eAAe,eACtCF,EAAMG,IAAN,UAAeC,kCAAf,uBAAoDL,EAApD,QACAC,EAAMK,OACNL,EAAMM,QAAU,SAACC,GAAD,OAAWT,MAU7B,OARU,uCAAG,sBAAAU,EAAA,sEACSP,SAASC,eAAe,eADjC,cAEXD,SAASC,eAAe,eAAeI,QAAU,SAACC,GAChDT,KAHS,2CAAH,oDAMVO,GAGE,wBAAOI,GAAG,cAAcC,UAAQ,EAAhC,UACE,wBACEP,IAAG,UAAKC,kCAAL,uBAA0CR,EAA1C,QACHe,KAAK,eAHT,uDCNWC,EAnBF,WACX,OACE,uBAAMC,UAAU,QAAQJ,GAAG,eAA3B,UACE,mEACA,+BACE,6BACE,cAAC,IAAD,CAAMlB,GAAG,UAAT,sBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,2BCAKuB,EAbQ,SAAAC,GACrB,OACE,qBACEN,GAAG,UACHO,QAAS,WACPD,EAAME,eAHV,SAME,6CAAgBF,EAAMG,gBAAtB,WCwBSC,G,MA/BK,SAACJ,GA4BnB,OAAO,qBAAKF,UAAU,gBAAf,SAxBEE,EAAMK,OAAOC,KAAI,SAACC,GACvB,OAAIA,EAEA,qBACEnB,IAAG,UAAKC,kCAAL,uBAA0CkB,EAA1C,QACHT,UAAU,gBAEVG,QAAS,kBAAMD,EAAMQ,UAAUD,IAC/BE,IAAKF,GAFAA,GAOP,qBACEnB,IAAG,UAAKC,kCAAL,yBACHS,UAAU,gBAEVW,IAAI,eADCF,U,OCvBV,SAASG,EAAUC,GAOxB,IAJA,IAAIC,EAAG,YAAOC,MAAMF,GAAQG,QACxBC,EAAUH,EAAII,QACdC,EAAS,GAEJC,EAAI,EAAGA,EAAIN,EAAID,OAAQO,IAAK,CACnC,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWP,EAAQJ,QACrDM,EAAOM,KAAKR,EAAQI,IACpBJ,EAAQS,OAAOL,EAAa,GAE9B,OAAOF,EAET,IAAIQ,EAAa,SAAAC,GAKf,IAAMC,EAAQD,EAAME,QAAQ,MACxBC,EAAYH,EAAMV,QACtBa,EAAUF,GAAS,EAEnB,IADA,IAAIG,EAAkB,EACbZ,EAAI,EAAGA,GAAKQ,EAAMf,OAAQO,IAC7BA,EAAI,GAAKW,EAAUX,GAAKW,EAAUX,EAAI,IACxCY,IAGJ,OAAOA,EAAkB,IAAM,GC3BpBC,EAAa,WACxB,MAAO,CACLnC,KAAM,gBAGGoC,EAAY,WACvB,MAAO,CACLpC,KAAM,eAsBGqC,EAAY,SAAAC,GACvB,MAAO,CACLtC,KAAM,aACNuC,QAAS,CACPD,YClCOE,EAAa,SAACC,EAAOC,EAASC,GACzC,OAAIF,EAAQ,GAAKC,EAAU,EACnB,GAAN,OAAUC,EAAV,OACSF,EAAQ,EACX,GAAN,OAAUC,EAAV,oBAA6BC,EAA7B,MAEM,GAAN,OAAUF,EAAV,cAAqBC,EAArB,oBAAwCC,EAAxC,OCKEC,E,4MACJC,MAAQ,CAAEC,MAAO,EAAGL,MAAO,EAAGC,QAAS,EAAGC,QAAS,G,EAGnDI,cAAgB,SAAAC,GACd,IAAIC,EAAWD,EAAU,EAAKH,MAAMC,MAChCL,EAAQjB,KAAKC,MAAMwB,EAAW,IAAO,GAAK,IAC1CP,EAAUlB,KAAKC,MAAOwB,EAAW,IAAO,GAAM,IAMlD,OALI,EAAKJ,MAAMF,SAAW,IACxB,EAAKO,SAAS,CAAEP,SAAU,IAIrB,CAACF,EAAOC,EAFD,EAAKG,MAAMF,QAAU,I,EAIrCQ,QAAU,SAAAH,GAGR,IAAMI,EAAO,EAAKL,cAAcC,GAEhC,EAAKE,SAAS,CACZT,MAAOW,EAAK,GACZV,QAASU,EAAK,GACdT,QAASS,EAAK,KAEhB,EAAKF,SAAS,CACZF,QAASR,EACP,EAAKK,MAAMJ,MACX,EAAKI,MAAMH,QACX,EAAKG,MAAMF,Y,EAIjBU,SAAW,WAET,EAAKH,SAAS,CAAEJ,OAAO,IAAIQ,MAAOC,a,EAGpCC,WAAa,WACX,EAAKC,aAAeC,aAAY,WAC9B,EAAKP,SAAQ,IAAIG,MAAOC,aACvB,M,EAGLpB,WAAa,WAQX,EAAKkB,WACL,EAAKG,c,EAEPpB,UAAY,WAEVuB,cAAc,EAAKF,cACnB,EAAKrD,MAAMwD,OACTpB,EAAW,EAAKK,MAAMJ,MAAO,EAAKI,MAAMH,QAAS,EAAKG,MAAMF,UAE9D,EAAKO,SAAS,CACZ3C,gBAAiBiC,EACf,EAAKK,MAAMJ,MACX,EAAKI,MAAMH,QACX,EAAKG,MAAMF,WAGf,EAAKO,SAAS,CAAET,MAAO,EAAGC,QAAS,EAAGC,QAAS,EAAGK,QAAS,M,EAG7Da,qBAAuB,WACrBF,cAAc,EAAKF,cACnB,EAAKrD,MAAMgC,a,iEAGM0B,GAEjB,IAAMC,EAAWC,KAAK5D,MAElB0D,EAASV,OAASW,EAASX,QACL,IAApBY,KAAK5D,MAAMgD,KACbY,KAAK7B,cACwB,IAApB6B,KAAK5D,MAAMgD,MACpBY,KAAK5B,e,+BAMT,OAAO,qBAAKtC,GAAG,QAAR,SAAiBkE,KAAKnB,MAAMG,c,GA1FnBiB,aAmGLC,eANS,SAAArB,GACtB,MAAO,CACLO,KAAMP,EAAMO,KACZ7C,gBAAiBsC,EAAMtC,mBAKzB,CACE4B,aACAC,YACA+B,WFnGsB,WACxB,MAAO,CACLnE,KAAM,gBEkGNO,gBF/F2B,SAAA6C,GAC7B,MAAO,CACLpD,KAAM,oBACNuC,QAAS,CACPa,WEqFSc,CAQbtB,GCtCasB,eAPS,SAAArB,GACtB,MAAO,CACLO,KAAMP,EAAMO,KACZ7C,gBAAiBsC,EAAMtC,gBACvB+B,OAAQO,EAAMP,UAKhB,CACEH,aACAC,YACAC,aALW6B,EAtEA,SAAA9D,GAAU,IAAD,EACUpB,mBAAS,CAAC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAD/C,mBACfoF,EADe,KACLC,EADK,OAEUrF,oBAAS,GAFnB,mBAEfsF,EAFe,KAELC,EAFK,OAGwBvF,mBAAS,GAHjC,mBAGfuB,EAHe,KAGEiE,EAHF,OAIIxF,mBAAS,GAJb,mBAIfyF,EAJe,KAIRC,EAJQ,OAKY1F,oBAAS,GALrB,mBAKf2F,EALe,KAKJC,EALI,KA0CtB,OACE,uBAAM1E,UAAU,QAAhB,UACE,sBAAKJ,GAAG,aAAR,UACE,cAAC,EAAD,CAAO8D,OATY,SAAAR,GACvBoB,EAAmBpB,MASf,uBAAMtD,GAAG,eAAT,UAAyBM,EAAMkC,OAA/B,SACA,uBAAMxC,GAAG,eAAT,UAAyB2E,EAAzB,eAEF,wBAAQpE,QArCM,WAJhBuE,GAAa,GACbxE,EAAMgC,YACNsC,EAAS,GAITtE,EAAM+B,aACNoC,GAAY,GAEZ,IAAMM,EJGa,SAAAC,GACrB,IAAIzD,EACJ,GAEEA,EADaP,EAAUgE,EAAM/D,QACbgE,QAAO,SAASC,EAAKC,GAEnC,OADAD,EAAIrD,KAAKmD,EAAMG,IACRD,IACN,WACKnD,EAAWR,IACrB,OAAOA,EIZe6D,CAAQ,CAAC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACxDb,EAAYQ,GACZvF,SAASC,eAAe,kBAAkB4F,UAAY,SA8BxBrF,GAAG,iBAA/B,mBAGA,cAAC,EAAD,CAAac,UA/BO,SAAAD,GAEtB,GADA+D,EAASD,EAAQ,GACbH,EAAU,CACZ,IAAMO,EJQa,SAACO,EAAMtD,GAI9B,IAAIuD,EAAWvD,EAAMV,QACrB,OAAwB,OAApBU,EAAMsD,EAAO,IACfC,EAASD,GAAQ,KACjBC,EAASD,EAAO,GAAKtD,EAAMsD,GACpBC,GACsB,OAApBvD,EAAMsD,EAAO,IACtBC,EAASD,GAAQ,KACjBC,EAASD,EAAO,GAAKtD,EAAMsD,GACpBC,GACsB,OAApBvD,EAAMsD,EAAO,IAAuB,GAARA,GAAqB,GAARA,GAClDC,EAASD,GAAQ,KACjBC,EAASD,EAAO,GAAKtD,EAAMsD,GACpBC,GACsB,OAApBvD,EAAMsD,EAAO,IAAuB,GAARA,GAAqB,GAARA,GAClDC,EAASD,GAAQ,KACjBC,EAASD,EAAO,GAAKtD,EAAMsD,GACpBC,GAEAA,EI9BezE,CAAUwD,EAASpC,QAAQrB,GAAQyD,GACvDC,EAAYQ,GJiCY,SAAAT,GAC5B,OACEkB,KAAKC,UAAUnB,KAAckB,KAAKC,UAAU,CAAC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IIlClEC,CAAeX,KACjBzE,EAAMiC,UAAU,KAChBjC,EAAMgC,YACNsC,EAAS,GACTH,GAAY,GACZK,GAAa,GACbtF,SAASC,eAAe,kBAAkB4F,UAAY,WAoBf1E,OAAQ2D,IAChDO,EACC,cAAC,EAAD,CACEpE,gBAAiBA,EACjBD,YAjBa,WACnBsE,GAAa,MAkBP,WCxCKa,EA1BG,SAACrF,GAmBjB,OACE,qBAAKF,UAAU,cAAcJ,GAAE,qBAAgBM,EAAMgF,MAArD,SAjBE,eAAC,IAAMM,SAAP,WACE,qBACElG,IAAG,UAAKC,kCAAL,gBAAmCW,EAAMO,MAAzC,QACHT,UAAU,qBACVW,IAAG,cAAST,EAAMO,SAGpB,qBACEnB,IAAG,UAAKC,kCAAL,iBACHS,UAAU,oBACVW,IAAI,OACJR,QAAS,kBAAMD,EAAMuF,OAAOvF,EAAMO,MAAOP,EAAMgF,eCI1CQ,EAhBG,SAAAxF,GAChB,IAAMyF,EAAa,SAAClF,EAAOyE,GACzB9F,SAASwG,cAAT,sBAAsCV,IAAQW,UAAUC,IAAI,QAC5D5F,EAAM6F,UAAUtF,EAAOyE,IAUzB,OAAO,qBAAKlF,UAAU,cAAf,SAPEE,EAAMK,OAAOC,KAAI,SAACC,EAAOoB,GAE9B,OACE,cAAC,EAAD,CAAWpB,MAAOA,EAAOyE,KAAMrD,EAAmB4D,OAAQE,GAAf9D,SCb5C,SAASmE,EAAUpE,GACxB,IAEIC,EAFAE,EAAS,YAAOH,GAChBuD,EAAW,GAQf,OANAvD,EAAMqE,SAAQ,SAAAC,GACZrE,EAAQP,KAAKC,MAAMD,KAAKE,SAAWO,EAAUlB,OAAS,GACtDsE,EAAS1D,KAAKM,EAAUF,IACxBE,EAAUL,OAAOG,EAAO,MAGnBsD,EAGF,ICyGQnB,eAPS,SAAArB,GACtB,MAAO,CACLO,KAAMP,EAAMO,KACZ7C,gBAAiBsC,EAAMtC,gBACvB+B,OAAQO,EAAMP,UAKhB,CACEH,aACAC,YACAC,aALW6B,EA1GF,SAAA9D,GAAS,MAIQpB,mBAAS,IAJjB,mBAIbyB,EAJa,KAIL4F,EAJK,OAKUrH,mBAAS,IALnB,mBAKbsH,EALa,KAKJC,EALI,OAMcvH,mBAAS,GANvB,mBAMbwH,EANa,KAMFC,EANE,OAO0BzH,mBAAS,GAPnC,mBAObuB,EAPa,KAOIiE,EAPJ,OAQMxF,mBAAS,GARf,mBAQbyF,EARa,KAQNC,EARM,OASc1F,oBAAS,GATvB,mBASb2F,EATa,KASFC,EATE,KA6EpB,OACE,uBAAM1E,UAAU,QAAhB,UACE,sBAAKJ,GAAG,aAAR,UACE,cAAC,EAAD,CAAO8D,OATY,SAAAR,GACvBoB,EAAmBpB,MASf,uBAAMtD,GAAG,eAAT,UAAyBM,EAAMkC,OAA/B,SACA,uBAAMxC,GAAG,eAAT,UAAyB2E,EAAzB,eAGF,wBAAQpE,QArEM,WAJhBD,EAAMgC,YACNsC,EAAS,GACTE,GAAa,GAKb,IDlBuBE,ECkBjBD,EDhBDqB,EAFkBpB,ECkBS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IDhBtC4B,OAAOR,EAAUpB,ICiBvCuB,EAAUxB,GACVvF,SAASC,eAAe,gBAAgB4F,UAAY,QACpD/E,EAAM+B,cA+DwBrC,GAAG,eAA/B,mBAGA,cAAC,EAAD,CAAWW,OAAQA,EAAQwF,UAhER,SAACtF,EAAOyE,GAC7BV,EAASD,EAAQ,GAEoB,IAAnCkC,OAAOC,QAAQN,GAASvF,QACxBuF,EAAQO,cAAgBF,OAGxBJ,EAAW,CAAEnB,OAAMzE,WAEfA,IAAU2F,EAAQ3F,OAEpBrB,SACGwG,cADH,sBACgCV,IAC7BW,UAAUC,IAAI,aACjB1G,SACGwG,cADH,sBACgCQ,EAAQlB,OACrCW,UAAUC,IAAI,aACjBS,EAAaD,EAAY,GACzBpG,EAAMiC,UAAU,KAGhByE,YAAW,WACT,IACExH,SACGwG,cADH,sBACgCV,IAC7BW,UAAUgB,OAAO,QACpBzH,SACGwG,cADH,sBACgCQ,EAAQlB,OACrCW,UAAUgB,OAAO,QACpB,MAAOC,GACPC,QAAQC,IAAIF,MAEb,KAGLT,EAAW,IAEO,IAAdC,IACF5B,GAAa,GACbxE,EAAMgC,YACNsC,EAAS,GACTtE,EAAMiC,UAAU,KAEhB/C,SAASC,eAAe,gBAAgB4F,UAAY,aAuBrDR,EACC,cAAC,EAAD,CACEpE,gBAAiBA,EACjBD,YAnBa,WACnBsE,GAAa,MAoBP,WC5FH,IAAMM,EAAU,SAACJ,GACtB,IACIpD,EAjBC,SAAmBX,GAOxB,IAJA,IAAIC,EAAG,YAAOC,MAAMF,GAAQG,QACxBC,EAAUH,EAAII,QACdC,EAAS,GAEJC,EAAI,EAAGA,EAAIN,EAAID,OAAQO,IAAK,CACnC,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWP,EAAQJ,QACrDM,EAAOM,KAAKR,EAAQI,IACpBJ,EAAQS,OAAOL,EAAa,GAE9B,OAAOF,EAKMP,CAAUgE,EAAM/D,QAK7B,OAJSW,EAAOqD,QAAO,SAAUC,EAAKC,GAEpC,OADAD,EAAIrD,KAAKmD,EAAMG,IACRD,IACN,KAOQmC,EAAW,SAACf,GACT,IAAIgB,MAAJ,UACT3H,kCADS,uBAC4B2G,EAD5B,SAGR1G,QAGK2H,EAAkB,SAACjB,GAC9B,IACE9G,SAASC,eAAT,sBAAuC6G,IAAWL,UAAUC,IAAI,WAChE,MAAOgB,GACPC,QAAQC,IAAIF,KAIHM,EAAqB,SAAClB,GACjC,IACE9G,SACGC,eADH,sBACiC6G,IAC9BL,UAAUgB,OAAO,WACpB,MAAOC,GACPC,QAAQC,IAAIF,KCnCDO,EAZG,SAACnH,GACjB,OACE,qBAAKF,UAAU,cAAcJ,GAAE,sBAAiBM,EAAMgG,SAAtD,SACE,qBACE5G,IAAG,UAAKC,kCAAL,gBAAmCW,EAAMgG,QAAzC,QACHvF,IAAKT,EAAMgG,QACX/F,QAAS,kBAAMD,EAAMoH,MAAMpH,EAAMgG,eCO1BqB,EAXG,SAAArH,GAQhB,OAAO,qBAAKF,UAAU,cAAf,SANEE,EAAM0B,MAAMpB,KAAI,SAAA0F,GACrB,OACE,cAAC,EAAD,CAAWoB,MAAOpH,EAAMsH,YAAatB,QAASA,GAAcA,SCmIrDlC,eAPS,SAAArB,GACtB,MAAO,CACLO,KAAMP,EAAMO,KACZ7C,gBAAiBsC,EAAMtC,gBACvB+B,OAAQO,EAAMP,UAKhB,CACEH,aACAC,YACAC,aALW6B,EA1HF,SAAA9D,GAAS,MAGMpB,mBAAS,CAAC,EAAG,EAAG,IAHtB,mBAGb2I,EAHa,KAGNC,EAHM,OAIM5I,mBAAS,CAAC,EAAG,EAAG,IAJtB,mBAIb8C,EAJa,KAIN+F,EAJM,OAKY7I,mBAAS,IALrB,mBAKboF,EALa,KAKHC,EALG,OAMYrF,oBAAS,GANrB,mBAMbsF,EANa,KAMHC,EANG,OAOcvF,oBAAS,GAPvB,mBAOb8I,EAPa,KAOFC,EAPE,OAQc/I,oBAAS,GARvB,mBAQb2F,EARa,KAQFC,EARE,OAS0B5F,mBAAS,GATnC,mBASbuB,EATa,KASIiE,EATJ,OAUMxF,mBAAS,GAVf,mBAUbyF,EAVa,KAUNC,EAVM,KA8CdsD,EAAc,SAAC5B,GAAwB,IAAfrE,EAAc,uDAAN,EAEpC+E,YAAW,WACTK,EAASf,GACTiB,EAAgBjB,KACf,KAAOrE,GACV+E,YAAW,WACTQ,EAAmBlB,GAEfrE,IAAUD,EAAMf,OAAS,GAC3BgH,GAAa,KAEd,IAAO,KAAOhG,IAEbkG,EAAY,SAAAnG,GAEhB,OADAiG,GAAa,GACNjG,EAAMqE,SAAQ,SAACC,EAASrE,GAC7BiG,EAAY5B,EAASrE,OA6BzB,OACE,uBAAM7B,UAAU,QAAhB,UACE,sBAAKJ,GAAG,aAAR,UACE,cAAC,EAAD,CAAO8D,OATY,SAAAR,GACvBoB,EAAmBpB,MASf,uBAAMtD,GAAG,eAAT,UAAyBM,EAAMkC,OAA/B,SACA,uBAAMxC,GAAG,eAAT,UAAyB2E,EAAzB,eAGF,wBAAQpE,QAnFM,WAJhBD,EAAMgC,YACNsC,EAAS,GACTE,GAAa,GAKb,IAAMS,EAAWH,EAAQ,CAAC,EAAG,EAAG,IAChC2C,EAASxC,GACT/F,SAASC,eAAe,gBAAgB4F,UAAY,QACpDZ,GAAY,GAEZ0D,EAAU5C,GACVjF,EAAM+B,cA0EwBrC,GAAG,eAA/B,mBAGA,cAAC,EAAD,CAAWgC,MAAO6F,EAAOD,YArCT,SAAA/G,GAClB+D,EAASD,EAAQ,GAEbH,IAAawD,IACfE,EAAYrH,GACRA,IAAUmB,EAAMsC,EAASrD,SAE3BsD,EAAY,GAAD,mBAAKD,GAAL,CAAezD,KAEtB2E,KAAKC,UAAL,sBAAmBnB,GAAnB,CAA6BzD,MAAW2E,KAAKC,UAAUzD,KACzD1B,EAAMiC,UAAU,KAhDN,WAChB,GAAmBP,EHrBRf,OAAS,EGsBlB6D,GAAa,GACbxE,EAAMiC,UAAU,KAChBkC,GAAY,GACZnE,EAAMgC,YACN9C,SAASC,eAAe,gBAAgB4F,UAAY,YAC/C,CAEL,IAAM+C,EAAQ,sBAAOP,GAAP,CAAcA,EAAM5G,SAClC6G,EAASM,GACT,IAAM7C,EAAWH,EAAQgD,GACzBL,EAASxC,GACTyB,YAAW,WACTmB,EAAU5C,KACT,MAkCC8C,MAIF9D,EAAY,IACZ4D,EAAUnG,QAuBX6C,EACC,cAAC,EAAD,CACEpE,gBAAiBA,EACjBD,YAnBa,WACnBsE,GAAa,MAoBP,WCzHKwD,EAJC,WACd,OAAO,4CC6BMC,E,uKAhBX,OACE,sBAAKvI,GAAG,MAAR,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwI,OAAK,EAACC,KAAK,IAAIC,UAAWvI,IACjC,cAAC,IAAD,CAAOsI,KAAK,UAAUC,UAAWC,IACjC,cAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWE,IAC/B,cAAC,IAAD,CAAOH,KAAK,QAAQC,UAAWG,IAC/B,cAAC,IAAD,CAAOH,UAAWJ,OAEpB,cAAC,EAAD,IACA,cAAC,EAAD,W,GAbUnE,aCdX,SAASiC,EAAUpE,GACxB,IAEIC,EAFAE,EAAS,YAAOH,GAChBuD,EAAW,GAWf,OATAvD,EAAMqE,SAAQ,SAAAC,GACZrE,EAAQP,KAAKC,MAAMD,KAAKE,SAAWO,EAAUlB,OAAS,GACtDsE,EAAS1D,KAAKM,EAAUF,IACxBE,EAAUL,OAAOG,EAAO,MA4B5B,SAAoBD,GAMlB,IADA,IAAII,EAAkB,EACbZ,EAAI,EAAGA,GAAKQ,EAAMf,OAAQO,IACjC,GAAiB,OAAbQ,EAAMR,GAGR,IAAK,IAAIsH,EAAItH,EAAGsH,GAAK9G,EAAMf,OAAQ6H,IAC7B9G,EAAM8G,GAAK9G,EAAMR,IACnBY,IAKR,OAAIA,EAAkB,IAAM,EA1CvBL,CAAWwD,IACda,EAAUpE,GAELuD,EAEF,SAASzE,EAAUkB,EAAOnB,GAI/B,IAAMoB,EAAQD,EAAME,QAAQrB,GAc5B,OAbyB,OAArBmB,EAAMC,EAAQ,IAChBD,EAAMC,GAAS,KACfD,EAAMC,EAAQ,GAAKpB,GACW,OAArBmB,EAAMC,EAAQ,IACvBD,EAAMC,GAAS,KACfD,EAAMC,EAAQ,GAAKpB,GACW,OAArBmB,EAAMC,EAAQ,IACvBD,EAAMC,GAAS,KACfD,EAAMC,EAAQ,GAAKpB,GACW,OAArBmB,EAAMC,EAAQ,KACvBD,EAAMC,GAAS,KACfD,EAAMC,EAAQ,GAAKpB,GAEd,YAAImB,GC9Bb,IAgHe+G,cAAgB,CAC7BzF,KAjHY,WAA2B,IAA1BA,EAAyB,wDAAX0F,EAAW,uCAGtC,MAAoB,gBAAhBA,EAAO9I,MAEgB,eAAhB8I,EAAO9I,OAES,oBAAhB8I,EAAO9I,KACToD,EAAO,EACW,gBAAhB0F,EAAO9I,KACT,QAEAoD,IAsGT7C,gBAnGsB,WAAuB,IAAtB6C,EAAqB,uDAAd,EAAG0F,EAAW,uCAC5C,MAAoB,sBAAhBA,EAAO9I,KACF8I,EAAOvG,QAAQa,KACG,cAAhB0F,EAAO9I,KACT,EAEAoD,GA8FTd,OA3Fa,WAAyB,IAAxBA,EAAuB,uDAAd,EAAGwG,EAAW,uCACrC,MAAoB,iBAAhBA,EAAO9I,KACF,EACkB,eAAhB8I,EAAO9I,KACTsC,EAASwG,EAAOvG,QAAQD,OAExBA,GAsFTmC,MAnFY,WAAwB,IAAvBA,EAAsB,uDAAd,EAAGqE,EAAW,uCACnC,MAAoB,uBAAhBA,EAAO9I,KACFyE,EAAQ,EACU,mBAAhBqE,EAAO9I,KACT,EAEAyE,GA8ETsE,MA3EY,WAAwB,IAAvBA,EAAsB,uDAAd,EAAGD,EAAW,uCACnC,MAAoB,aAAhBA,EAAO9I,KACF+I,EAAQ,EACU,gBAAhBD,EAAO9I,KACT,EAEA+I,GAsETC,YAlEkB,WAA4D,IAA3DC,EAA0D,uDAA3C,CAAC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIH,EAAW,uCAC7E,MAAoB,4BAAhBA,EAAO9I,KACFkG,EAAU4C,EAAOvG,QAAQT,OACP,uBAAhBgH,EAAO9I,KACTY,EAAUkI,EAAOvG,QAAQT,MAAOgH,EAAOvG,QAAQ5B,OAE/CsI,GA6DTC,cAzDoB,WAA2B,IAA1BC,EAAyB,uDAAd,EAAGL,EAAW,uCAC9C,MAAoB,yBAAhBA,EAAO9I,KACF8I,EAAOvG,QAAQ6G,KAEfD,GAsDTE,UAnDgB,WAAgC,IAA/BJ,EAA8B,uDAAf,GAAIH,EAAW,uCAC/C,MAAoB,wBAAhBA,EAAO9I,KACF,YAAIiB,MAAM6H,EAAOvG,QAAQ6G,MAAMlI,QAAQwF,OAAvC,YACFzF,MAAM6H,EAAOvG,QAAQ6G,MAAMlI,SAEP,0BAAhB4H,EAAO9I,KACTkG,EAAU+C,GAEVA,GA4CTK,SAzCe,WAAwB,IAAvBC,EAAsB,uDAAf,GAAIT,EAAW,uCACtC,MAAoB,mBAAhBA,EAAO9I,KACF8I,EAAOvG,QAAQgH,KAEJ,qBAAhBT,EAAO9I,KACF,GAEAuJ,GAmCTC,UA/BgB,WAAgC,IAA/BP,EAA8B,uDAAf,GAAIH,EAAW,uCAC/C,MAAoB,wBAAhBA,EAAO9I,KACF,YAAIiB,MAAM6H,EAAOvG,QAAQwG,MAAQ,GAAG7H,QAClB,uBAAhB4H,EAAO9I,KACTiJ,EAAavC,OAAOoC,EAAOvG,QAAQ8C,UACjB,0BAAhByD,EAAO9I,KACTkG,EAAU+C,GAEVA,GAwBTQ,eArBqB,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIZ,EAAW,uCAC7C,MAAoB,qBAAhBA,EAAO9I,KACF0J,EACkB,oBAAhBZ,EAAO9I,KACT,GAEA0J,KCpGXC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOC,YAAYC,GAA7B,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJzK,SAASC,eAAe,W","file":"static/js/main.5fff7356.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/slider\">Slider</Link>\n        </li>\n        <li>\n          <Link to=\"/memo\">Memo</Link>\n        </li>\n        <li>\n          <Link to=\"/bark\">Bark</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      Music by <a href=\"https://www.bensound.com\">https://www.bensound.com</a>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\n\nconst Audio2 = () => {\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(0);\n\n  const playNext = () => {\n    let next;\n    if (currentlyPlaying < 3) {\n      next = currentlyPlaying + 1;\n    } else {\n      next = 0;\n      setCurrentlyPlaying(0);\n    }\n    setCurrentlyPlaying(next);\n    const audio = document.getElementById(\"audioPlayer\");\n    audio.src = `${process.env.PUBLIC_URL}/audio/audio${next}.mp3`;\n    audio.play();\n    audio.onended = (event) => playNext();\n  };\n  const play = async () => {\n    const audio = await document.getElementById(\"audioPlayer\");\n    document.getElementById(\"audioPlayer\").onended = (event) => {\n      playNext();\n    };\n  };\n  play();\n\n  return (\n    <audio id=\"audioPlayer\" controls>\n      <source\n        src={`${process.env.PUBLIC_URL}/audio/audio${currentlyPlaying}.mp3`}\n        type=\"audio/mpeg\"\n      />\n      Your browser does not support the audio element.\n    </audio>\n  );\n};\n\nexport default Audio2;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <main className=\"board\" id=\"board__empty\">\n      <h1>Welcome. Please choose your game.</h1>\n      <ul>\n        <li>\n          <Link to=\"/slider\">Slider</Link>\n        </li>\n        <li>\n          <Link to=\"/memo\">Memo</Link>\n        </li>\n        <li>\n          <Link to=\"/bark\">Bark</Link>\n        </li>\n      </ul>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst WinningMessage = props => {\n  return (\n    <div\n      id=\"message\"\n      onClick={() => {\n        props.handleClose();\n      }}\n    >\n      <h1>You won in {props.timeWhenStopped} !</h1>\n    </div>\n  );\n};\n\nexport default WinningMessage;\n","import React from \"react\";\nimport \"../../sass/main.scss\";\n\nconst SliderBoard = (props) => {\n  //Where pieces is an array of pieces in the correct order\n  //With null as no piece\n  const renderBoard = () => {\n    return props.pieces.map((piece) => {\n      if (piece) {\n        return (\n          <img\n            src={`${process.env.PUBLIC_URL}/img/slider/${piece}.jpg`}\n            className=\"slider--piece\"\n            key={piece}\n            onClick={() => props.movePiece(piece)}\n            alt={piece}\n          />\n        );\n      } else {\n        return (\n          <img\n            src={`${process.env.PUBLIC_URL}/img/slider/empty.png`}\n            className=\"slider--piece\"\n            key={piece}\n            alt=\"empty space\"\n          />\n        );\n      }\n    });\n  };\n\n  return <div className=\"board__slider\">{renderBoard()}</div>;\n};\n\nexport default SliderBoard;\n","export function newSeqNoR(length) {\n  /* Returns an array of [0,...,length-1] - no repeats */\n\n  let arr = [...Array(length).keys()]; //for iteration\n  let arrCopy = arr.slice(); //for operation: deep copy\n  let newArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let randomIndex = Math.floor(Math.random() * arrCopy.length);\n    newArr.push(arrCopy[randomIndex]); //push random number to array\n    arrCopy.splice(randomIndex, 1);\n  }\n  return newArr;\n}\nlet isSolvable = order => {\n  //only applies to odd-numbered grid widths!\n  //find the number of inversion, by counting tiles that preceed another tile with lower number\n  //odd number - unsolvable\n  //kudos to Tushar Vaghela on Stack\n  const index = order.indexOf(null);\n  let orderCopy = order.slice();\n  orderCopy[index] = 0;\n  let totalInversions = 0;\n  for (let i = 0; i <= order.length; i++) {\n    if (i < 9 && orderCopy[i] > orderCopy[i + 1]) {\n      totalInversions++;\n    }\n  }\n  return totalInversions % 2 === 0;\n};\nexport const shuffle = array => {\n  let newArr;\n  do {\n    let random = newSeqNoR(array.length);\n    newArr = random.reduce(function(sum, thisElement) {\n      sum.push(array[thisElement]);\n      return sum;\n    }, []);\n  } while (!isSolvable(newArr));\n  return newArr;\n};\n\nexport const movePiece = (spot, order) => {\n  /*  [0][1][2]\n      [3][4][5]\n      [6][7][8]   */\n  let newOrder = order.slice();\n  if (order[spot - 3] === null) {\n    newOrder[spot] = null;\n    newOrder[spot - 3] = order[spot];\n    return newOrder;\n  } else if (order[spot + 3] === null) {\n    newOrder[spot] = null;\n    newOrder[spot + 3] = order[spot];\n    return newOrder;\n  } else if (order[spot - 1] === null && spot != 3 && spot != 6) {\n    newOrder[spot] = null;\n    newOrder[spot - 1] = order[spot];\n    return newOrder;\n  } else if (order[spot + 1] === null && spot != 2 && spot != 5) {\n    newOrder[spot] = null;\n    newOrder[spot + 1] = order[spot];\n    return newOrder;\n  } else {\n    return newOrder;\n  }\n};\n\nexport const checkIfGameWon = sequence => {\n  if (\n    JSON.stringify(sequence) === JSON.stringify([null, 1, 2, 3, 4, 5, 6, 7, 8])\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n","//TIME\nexport const startTimer = () => {\n  return {\n    type: \"START_TIMER\"\n  };\n};\nexport const stopTimer = () => {\n  return {\n    type: \"STOP_TIMER\"\n  };\n};\nexport const incrementTimer = () => {\n  return {\n    type: \"INCREMENT_TIMER\"\n  };\n};\nexport const resetTimer = () => {\n  return {\n    type: \"RESET_TIMER\"\n  };\n};\nexport const timeWhenStopped = time => {\n  return {\n    type: \"TIME_WHEN_STOPPED\",\n    payload: {\n      time\n    }\n  };\n};\n//POINTS\nexport const addPoints = points => {\n  return {\n    type: \"ADD_POINTS\",\n    payload: {\n      points\n    }\n  };\n};\nexport const resetPoints = () => {\n  return {\n    type: \"RESET_POINTS\"\n  };\n};\n//MOVEMENT\nexport const incrementMovement = () => {\n  return {\n    type: \"INCREMENT_MOVEMENT\"\n  };\n};\n\nexport const resetMovement = () => {\n  return {\n    type: \"RESET_MOVEMENT\"\n  };\n};\n//LEVEL\nexport const upLevel = () => {\n  return {\n    type: \"UP_LEVEL\"\n  };\n};\nexport const resetLevel = () => {\n  return {\n    type: \"RESET_LEVEL\"\n  };\n};\n\n//SLIDER\nexport const randomizeSlider = order => {\n  return {\n    type: \"RANDOMIZE_ORDER__SLIDER\",\n    payload: {\n      order\n    }\n  };\n};\n\nexport const movePieceSlider = (order, piece) => {\n  return {\n    type: \"MOVE_PIECE__SLIDER\",\n    payload: {\n      order,\n      piece\n      //add number of moves but only if piece *actually* moves\n    }\n  };\n};\n//MEMO\nexport const setboardSize = size => {\n  return {\n    type: \"SET_BOARD_SIZE__MEMO\",\n    payload: {\n      size\n    }\n  };\n};\nexport const setOrderMemo = size => {\n  return {\n    type: \"SET_NEW_ORDER__MEMO\",\n    payload: {\n      size\n    }\n  };\n};\nexport const randomizeMemo = () => {\n  return {\n    type: \"RANDOMIZE_ORDER__MEMO\"\n  };\n};\nexport const setPairMemo = pair => {\n  return {\n    type: \"SET_PAIR__MEMO\",\n    payload: {\n      pair\n    }\n  };\n};\nexport const resetPairMemo = () => {\n  return {\n    type: \"RESET_PAIR__MEMO\"\n  };\n};\n//BARK\nexport const setNewOrderBark = level => {\n  return {\n    type: \"SET_NEW_ORDER__BARK\",\n    payload: {\n      level\n    }\n  };\n};\nexport const addToOrderBark = newOrder => {\n  return {\n    type: \"ADD_TO_ORDER__BARK\",\n    payload: {\n      newOrder\n    }\n  };\n};\nexport const randomizeOrderBark = () => {\n  return {\n    type: \"RANDOMIZE_ORDER__BARK\"\n  };\n};\n\nexport const addToSeqBark = guess => {\n  return {\n    type: \"ADD_TO_SEQ__BARK\",\n    payload: {\n      guess\n    }\n  };\n};\nexport const resetSeqBark = () => {\n  return {\n    type: \"RESET_SEQ__BARK\"\n  };\n};\n","export const formatTime = (hours, minutes, seconds) => {\n  if (hours < 1 && minutes < 1) {\n    return `${seconds} s.`;\n  } else if (hours < 1) {\n    return `${minutes}min. and ${seconds}s.`;\n  } else {\n    return `${hours}h. ${minutes}min. and ${seconds}s.`;\n  }\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  startTimer,\n  stopTimer,\n  resetTimer,\n  timeWhenStopped\n} from \"../../actions\";\n\nimport { formatTime } from \"./helper\";\n\nclass Timer extends Component {\n  state = { time0: 0, hours: 0, minutes: 0, seconds: 0 };\n  timeInterval;\n\n  calculateTime = timeNow => {\n    let msPassed = timeNow - this.state.time0;\n    let hours = Math.floor(msPassed / 1000 / 60 / 60);\n    let minutes = Math.floor((msPassed / 1000 / 60) % 60);\n    if (this.state.seconds >= 59) {\n      this.setState({ seconds: -1 });\n    } //floor is wrong sometimes\n    let seconds = this.state.seconds + 1;\n    //let seconds = Math.floor((msPassed / 1000) % 60);\n    return [hours, minutes, seconds];\n  };\n  setTime = timeNow => {\n    //sets the hours, minutes and seconds\n    //based on time when timer was started and time now\n    const time = this.calculateTime(timeNow);\n    //this throws an error\n    this.setState({\n      hours: time[0],\n      minutes: time[1],\n      seconds: time[2]\n    });\n    this.setState({\n      timeNow: formatTime(\n        this.state.hours,\n        this.state.minutes,\n        this.state.seconds\n      )\n    });\n  };\n  setTime0 = () => {\n    //gets the current time when timer is started\n    this.setState({ time0: new Date().getTime() });\n  };\n\n  getTimeNow = () => {\n    this.timeInterval = setInterval(() => {\n      this.setTime(new Date().getTime());\n    }, 1000);\n  };\n\n  startTimer = () => {\n    /*this.setState = {\n      time0: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    }; //???*/\n    //initiates time0 and sets up the timeinterval\n    this.setTime0();\n    this.getTimeNow();\n  };\n  stopTimer = () => {\n    //this works\n    clearInterval(this.timeInterval);\n    this.props.getTWS(\n      formatTime(this.state.hours, this.state.minutes, this.state.seconds)\n    );\n    this.setState({\n      timeWhenStopped: formatTime(\n        this.state.hours,\n        this.state.minutes,\n        this.state.seconds\n      )\n    });\n    this.setState({ hours: 0, minutes: 0, seconds: 0, timeNow: \"\" });\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.timeInterval);\n    this.props.stopTimer();\n  };\n\n  componentDidUpdate(oldProps) {\n    //thx u/charliematters\n    const newProps = this.props;\n\n    if (oldProps.time !== newProps.time) {\n      if (this.props.time === true) {\n        this.startTimer();\n      } else if (this.props.time === false) {\n        this.stopTimer();\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"timer\">{this.state.timeNow}</div>;\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    time: state.time,\n    timeWhenStopped: state.timeWhenStopped\n  };\n};\nexport default connect(\n  mapStateToProps,\n  {\n    startTimer,\n    stopTimer,\n    resetTimer,\n    timeWhenStopped\n  }\n)(Timer);\n","import React, { useState } from \"react\";\n\nimport WinningMessage from \"../WinningMessage\";\nimport SliderBoard from \"./SliderBoard\";\nimport { shuffle, movePiece, checkIfGameWon } from \"./helpers\";\n\nimport Timer from \"../Timer/Timer\";\nimport { connect } from \"react-redux\";\nimport { startTimer, stopTimer, addPoints } from \"../../actions\";\n\nconst Slider = props => {\n  const [sequence, setSequence] = useState([null, 1, 2, 3, 4, 5, 6, 7, 8]);\n  const [isGameOn, setIsGameOn] = useState(false);\n  const [timeWhenStopped, setTimeWhenStopped] = useState(0);\n  const [moves, setMoves] = useState(0);\n  const [isGameWon, setIsGameWon] = useState(false);\n\n  const reset = () => {\n    setIsGameWon(false);\n    props.stopTimer();\n    setMoves(0);\n  };\n  const startGame = () => {\n    reset();\n    props.startTimer();\n    setIsGameOn(true);\n\n    const newSequence = shuffle([null, 1, 2, 3, 4, 5, 6, 7, 8]);\n    setSequence(newSequence);\n    document.getElementById(\"slider--button\").innerHTML = \"Reset\";\n  };\n  const handleMovePiece = piece => {\n    setMoves(moves + 1);\n    if (isGameOn) {\n      const newSequence = movePiece(sequence.indexOf(piece), sequence);\n      setSequence(newSequence);\n      if (checkIfGameWon(newSequence)) {\n        props.addPoints(600);\n        props.stopTimer();\n        setMoves(0);\n        setIsGameOn(false);\n        setIsGameWon(true);\n        document.getElementById(\"slider--button\").innerHTML = \"Start\";\n      }\n    }\n  };\n  const handleGettingTWS = time => {\n    setTimeWhenStopped(time);\n  };\n  const closeMessage = () => {\n    setIsGameWon(false);\n  };\n  return (\n    <main className=\"board\">\n      <div id=\"game--info\">\n        <Timer getTWS={handleGettingTWS} />\n        <span id=\"memo--points\">{props.points}pts</span>\n        <span id=\"memo--points\">{moves} moves</span>\n      </div>\n      <button onClick={startGame} id=\"slider--button\">\n        Start\n      </button>\n      <SliderBoard movePiece={handleMovePiece} pieces={sequence} />\n      {isGameWon ? (\n        <WinningMessage\n          timeWhenStopped={timeWhenStopped}\n          handleClose={closeMessage}\n        />\n      ) : null}\n    </main>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    time: state.time,\n    timeWhenStopped: state.timeWhenStopped,\n    points: state.points\n  };\n};\nexport default connect(\n  mapStateToProps,\n  {\n    startTimer,\n    stopTimer,\n    addPoints\n  }\n)(Slider);\n","import React from \"react\";\n\nconst MemoPiece = (props) => {\n  const renderPiece = () => {\n    return (\n      <React.Fragment>\n        <img\n          src={`${process.env.PUBLIC_URL}/img/${props.piece}.jpg`}\n          className=\"memo--piece__front\"\n          alt={`dog-${props.piece}`}\n        />\n\n        <img\n          src={`${process.env.PUBLIC_URL}/img/back.jpg`}\n          className=\"memo--piece__back\"\n          alt=\"back\"\n          onClick={() => props.onFlip(props.piece, props.spot)}\n        />\n      </React.Fragment>\n    );\n  };\n  return (\n    <div className=\"memo--piece\" id={`memo--spot-${props.spot}`}>\n      {renderPiece()}\n    </div>\n  );\n};\n\nexport default MemoPiece;\n","import React from \"react\";\n\nimport MemoPiece from \"./MemoPiece\";\n\nconst MemoBoard = props => {\n  const handleFlip = (piece, spot) => {\n    document.querySelector(`#memo--spot-${spot}`).classList.add(\"flip\");\n    props.flipPiece(piece, spot);\n  };\n  const renderBoard = () => {\n    return props.pieces.map((piece, index) => {\n      //I'm using index as key since MemoPieces should not be changing their place\n      return (\n        <MemoPiece piece={piece} spot={index} key={index} onFlip={handleFlip} />\n      );\n    });\n  };\n  return <div className=\"board__memo\">{renderBoard()}</div>;\n};\n\nexport default MemoBoard;\n","export function randomize(order) {\n  let orderCopy = [...order];\n  let newOrder = [];\n  let index;\n  order.forEach(element => {\n    index = Math.floor(Math.random() * orderCopy.length + 0);\n    newOrder.push(orderCopy[index]);\n    orderCopy.splice(index, 1);\n  });\n\n  return newOrder;\n}\n\nexport const getSequence = array => {\n  //produces a random sequence where each element of array appears twice\n  return randomize(array).concat(randomize(array));\n};\n\nexport const isGameWon = () => {};\n","import React, { useState } from \"react\";\n\nimport MemoBoard from \"./MemoBoard\";\nimport { getSequence } from \"./helpers.js\";\nimport WinningMessage from \"../WinningMessage\";\n\nimport Timer from \"../Timer/Timer\";\nimport { connect } from \"react-redux\";\nimport { startTimer, stopTimer, addPoints } from \"../../actions\";\n\n//stopping timer works only by button :(\n\nconst Memo = props => {\n  //piece is the image\n  //spot is the location on the board\n\n  const [pieces, setPieces] = useState([]);\n  const [flipped, setFlipped] = useState({});\n  const [pairsLeft, setPairsLeft] = useState(9);\n  const [timeWhenStopped, setTimeWhenStopped] = useState(0);\n  const [moves, setMoves] = useState(0);\n  const [isGameWon, setIsGameWon] = useState(false);\n\n  const reset = () => {\n    props.stopTimer();\n    setMoves(0);\n    setIsGameWon(false);\n  };\n  const startGame = () => {\n    reset();\n\n    const newSequence = getSequence([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    setPieces(newSequence);\n    document.getElementById(\"memo--button\").innerHTML = \"Reset\";\n    props.startTimer();\n  };\n  const handleFlipping = (piece, spot) => {\n    setMoves(moves + 1);\n    if (\n      Object.entries(flipped).length === 0 &&\n      flipped.constructor === Object\n    ) {\n      //first piece\n      setFlipped({ spot, piece });\n    } else {\n      if (piece === flipped.piece) {\n        //pair\n        document\n          .querySelector(`#memo--spot-${spot}`)\n          .classList.add(\"disappear\");\n        document\n          .querySelector(`#memo--spot-${flipped.spot}`)\n          .classList.add(\"disappear\");\n        setPairsLeft(pairsLeft - 1);\n        props.addPoints(50);\n      } else {\n        //no pair\n        setTimeout(() => {\n          try {\n            document\n              .querySelector(`#memo--spot-${spot}`)\n              .classList.remove(\"flip\");\n            document\n              .querySelector(`#memo--spot-${flipped.spot}`)\n              .classList.remove(\"flip\");\n          } catch (error) {\n            console.log(error);\n          }\n        }, 2000);\n      }\n      //set flipped to {} for next guess\n      setFlipped({});\n      //pairLeft is delayed\n      if (pairsLeft === 1) {\n        setIsGameWon(true);\n        props.stopTimer();\n        setMoves(0);\n        props.addPoints(200);\n        //redux : add Points(600);\n        document.getElementById(\"memo--button\").innerHTML = \"Start\";\n      }\n    }\n  };\n  const handleGettingTWS = time => {\n    setTimeWhenStopped(time);\n  };\n  const closeMessage = () => {\n    setIsGameWon(false);\n  };\n  return (\n    <main className=\"board\">\n      <div id=\"game--info\">\n        <Timer getTWS={handleGettingTWS} />\n        <span id=\"memo--points\">{props.points}pts</span>\n        <span id=\"memo--points\">{moves} moves</span>\n      </div>\n\n      <button onClick={startGame} id=\"memo--button\">\n        Start\n      </button>\n      <MemoBoard pieces={pieces} flipPiece={handleFlipping} />\n\n      {isGameWon ? (\n        <WinningMessage\n          timeWhenStopped={timeWhenStopped}\n          handleClose={closeMessage}\n        />\n      ) : null}\n    </main>\n  );\n};\nconst mapStateToProps = state => {\n  return {\n    time: state.time,\n    timeWhenStopped: state.timeWhenStopped,\n    points: state.points\n  };\n};\nexport default connect(\n  mapStateToProps,\n  {\n    startTimer,\n    stopTimer,\n    addPoints\n  }\n)(Memo);\n","export function newSeqNoR(length) {\n  /* Returns an array of [0,...,length-1] - no repeats */\n\n  let arr = [...Array(length).keys()]; //for iteration\n  let arrCopy = arr.slice(); //for operation: deep copy\n  let newArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let randomIndex = Math.floor(Math.random() * arrCopy.length);\n    newArr.push(arrCopy[randomIndex]); //push random number to array\n    arrCopy.splice(randomIndex, 1);\n  }\n  return newArr;\n}\n\nexport const shuffle = (array) => {\n  let newArr;\n  let random = newSeqNoR(array.length);\n  newArr = random.reduce(function (sum, thisElement) {\n    sum.push(array[thisElement]);\n    return sum;\n  }, []);\n  return newArr;\n};\nexport const checkIfGameWon = (array) => {\n  return array.length > 7;\n};\n\nexport const playBark = (element) => {\n  const audio = new Audio(\n    `${process.env.PUBLIC_URL}/audio/bark/${element}.mp3`\n  );\n  audio.play();\n};\n\nexport const addClassPlaying = (element) => {\n  try {\n    document.getElementById(`bark--piece-${element}`).classList.add(\"playing\");\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const removeClassPlaying = (element) => {\n  try {\n    document\n      .getElementById(`bark--piece-${element}`)\n      .classList.remove(\"playing\");\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from \"react\";\n\nconst BarkPiece = (props) => {\n  return (\n    <div className=\"bark--piece\" id={`bark--piece-${props.element}`}>\n      <img\n        src={`${process.env.PUBLIC_URL}/img/${props.element}.jpg`}\n        alt={props.element}\n        onClick={() => props.click(props.element)}\n      />\n    </div>\n  );\n};\n\nexport default BarkPiece;\n","import React from \"react\";\n\nimport BarkPiece from \"./BarkPiece\";\n\nconst BarkBoard = props => {\n  const renderBoard = () => {\n    return props.order.map(element => {\n      return (\n        <BarkPiece click={props.handleClick} element={element} key={element} />\n      );\n    });\n  };\n  return <div className=\"board__bark\">{renderBoard()}</div>;\n};\n\nexport default BarkBoard;\n","import React, { useState } from \"react\";\nimport {\n  shuffle,\n  checkIfGameWon,\n  playBark,\n  addClassPlaying,\n  removeClassPlaying\n} from \"./helpers\";\nimport BarkBoard from \"./BarkBoard\";\nimport WinningMessage from \"../WinningMessage\";\n\nimport Timer from \"../Timer/Timer\";\nimport { connect } from \"react-redux\";\nimport { startTimer, stopTimer, addPoints } from \"../../actions\";\n\n//hard with no colors? and no scale\n//mid no colors?\nconst Bark = props => {\n  //order is what you're guessing\n  //sequence is what you've guessed so far\n  const [board, setBoard] = useState([0, 1, 2]);\n  const [order, setOrder] = useState([0, 1, 2]);\n  const [sequence, setSequence] = useState([]);\n  const [isGameOn, setIsGameOn] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [timeWhenStopped, setTimeWhenStopped] = useState(0);\n  const [moves, setMoves] = useState(0);\n\n  const reset = () => {\n    props.stopTimer();\n    setMoves(0);\n    setIsGameWon(false);\n  };\n  const startGame = () => {\n    reset();\n\n    const newOrder = shuffle([0, 1, 2]);\n    setOrder(newOrder);\n    document.getElementById(\"bark--button\").innerHTML = \"Reset\";\n    setIsGameOn(true);\n    //state update is delayed\n    playOrder(newOrder);\n    props.startTimer();\n  };\n  const nextRound = () => {\n    if (checkIfGameWon(order)) {\n      setIsGameWon(true);\n      props.addPoints(700);\n      setIsGameOn(false);\n      props.stopTimer();\n      document.getElementById(\"bark--button\").innerHTML = \"Start\";\n    } else {\n      //add next element to the order\n      const newBoard = [...board, board.length];\n      setBoard(newBoard);\n      const newOrder = shuffle(newBoard);\n      setOrder(newOrder);\n      setTimeout(() => {\n        playOrder(newOrder);\n      }, 1000);\n    }\n  };\n  const playElement = (element, index = 0) => {\n    //play audio\n    setTimeout(() => {\n      playBark(element);\n      addClassPlaying(element);\n    }, 1500 * index);\n    setTimeout(() => {\n      removeClassPlaying(element);\n      //remove the isPlaying label on last piece in order to make pieces clickable again\n      if (index === order.length - 1) {\n        setIsPlaying(false);\n      }\n    }, 1000 + 1500 * index);\n  };\n  const playOrder = order => {\n    setIsPlaying(true);\n    return order.forEach((element, index) => {\n      playElement(element, index);\n    });\n  };\n  const handleClick = piece => {\n    setMoves(moves + 1);\n    //piece is the picture/sound\n    if (isGameOn && !isPlaying) {\n      playElement(piece);\n      if (piece === order[sequence.length]) {\n        //correct\n        setSequence([...sequence, piece]);\n        //state update is delayed\n        if (JSON.stringify([...sequence, piece]) == JSON.stringify(order)) {\n          props.addPoints(100);\n          nextRound();\n        }\n      } else {\n        //wrong guess\n        setSequence([]);\n        playOrder(order);\n      }\n    }\n  };\n  const handleGettingTWS = time => {\n    setTimeWhenStopped(time);\n  };\n  const closeMessage = () => {\n    setIsGameWon(false);\n  };\n  return (\n    <main className=\"board\">\n      <div id=\"game--info\">\n        <Timer getTWS={handleGettingTWS} />\n        <span id=\"memo--points\">{props.points}pts</span>\n        <span id=\"memo--points\">{moves} moves</span>\n      </div>\n\n      <button onClick={startGame} id=\"bark--button\">\n        Start\n      </button>\n      <BarkBoard order={board} handleClick={handleClick} />\n\n      {isGameWon ? (\n        <WinningMessage\n          timeWhenStopped={timeWhenStopped}\n          handleClose={closeMessage}\n        />\n      ) : null}\n    </main>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    time: state.time,\n    timeWhenStopped: state.timeWhenStopped,\n    points: state.points\n  };\n};\nexport default connect(\n  mapStateToProps,\n  {\n    startTimer,\n    stopTimer,\n    addPoints\n  }\n)(Bark);\n","import React from \"react\";\n\nconst Page404 = () => {\n  return <h1>Wrong url</h1>;\n};\n\nexport default Page404;\n","import React, { Component } from \"react\";\nimport { Switch } from \"react-router\";\nimport { Route } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport Footer from \"./components/Footer\";\nimport Audio from \"./components/Audio.jsx\";\n\nimport Home from \"./components/Home/Home\";\nimport Slider from \"./components/Slider/Slider\";\nimport Memo from \"./components/Memo/Memo\";\nimport Bark from \"./components/Bark/Bark\";\n\nimport Page404 from \"./components/Page404\";\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"app\">\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/slider\" component={Slider} />\n          <Route path=\"/memo\" component={Memo} />\n          <Route path=\"/bark\" component={Bark} />\n          <Route component={Page404} />\n        </Switch>\n        <Audio />\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n//<Board gameChoice={this.gameChoice} game={this.state.game} />\n/*\nTo do:\nfigure out what's going on with grid at 1200+ screen\nNav Bar: instructions? Or choice for theme/music and picture\nMaybe: add more picture options\nadd listener for keyboard arrows\nalternative to the empty/null piece\nTimer: Finish implementing for all games, add saving time\nThemes: ?\n*/\n","export function randomize(order) {\n  let orderCopy = [...order];\n  let newOrder = [];\n  let index;\n  order.forEach(element => {\n    index = Math.floor(Math.random() * orderCopy.length + 0);\n    newOrder.push(orderCopy[index]);\n    orderCopy.splice(index, 1);\n  });\n\n  if (!isSolvable(newOrder)) {\n    randomize(order);\n  }\n  return newOrder;\n}\nexport function movePiece(order, piece) {\n  /*  [0][1][2]\n      [3][4][5]\n      [6][7][8]   */\n  const index = order.indexOf(piece);\n  if (order[index - 3] === null) {\n    order[index] = null;\n    order[index - 3] = piece;\n  } else if (order[index + 3] === null) {\n    order[index] = null;\n    order[index + 3] = piece;\n  } else if (order[index - 1] === null) {\n    order[index] = null;\n    order[index - 1] = piece;\n  } else if (order[index + 1] === null) {\n    order[index] = null;\n    order[index + 1] = piece;\n  }\n  return [...order]; //WHY??????\n}\nfunction isSolvable(order) {\n  //only applies to odd-numbered grid widths!\n  //find the number of inversion, by counting tiles that preceed another tile with lower number\n  //odd number - unsolvable\n  //kudos to Tushar Vaghela on Stack\n  let totalInversions = 0;\n  for (let i = 0; i <= order.length; i++) {\n    if (order[i] === null) {\n      continue;\n    } else {\n      for (let j = i; j <= order.length; j++) {\n        if (order[j] < order[i]) {\n          totalInversions++;\n        }\n      }\n    }\n  }\n  if (totalInversions % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { randomize, movePiece } from \"./helpers\";\n\nconst timer = (time = false, action) => {\n  /* Stop: stops  and resets the timer\n  Start: resets and starts the timer */\n  if (action.type === \"START_TIMER\") {\n    return true;\n  } else if (action.type === \"STOP_TIMER\") {\n    return false;\n  } else if (action.type === \"INCREMENT_TIMER\") {\n    return time + 1;\n  } else if (action.type === \"RESET_TIMER\") {\n    return \"reset\";\n  } else {\n    return time;\n  }\n};\nconst timeWhenStopped = (time = 0, action) => {\n  if (action.type === \"TIME_WHEN_STOPPED\") {\n    return action.payload.time;\n  } else if (action.type === \"RESET_TWS\") {\n    return 0;\n  } else {\n    return time;\n  }\n};\nconst points = (points = 0, action) => {\n  if (action.type === \"RESET_POINTS\") {\n    return 0;\n  } else if (action.type === \"ADD_POINTS\") {\n    return points + action.payload.points;\n  } else {\n    return points;\n  }\n};\nconst moves = (moves = 0, action) => {\n  if (action.type === \"INCREMENT_MOVEMENT\") {\n    return moves + 1;\n  } else if (action.type === \"RESET_MOVEMENT\") {\n    return 0;\n  } else {\n    return moves;\n  }\n};\nconst level = (level = 1, action) => {\n  if (action.type === \"UP_LEVEL\") {\n    return level + 1;\n  } else if (action.type === \"RESET_LEVEL\") {\n    return 1;\n  } else {\n    return level;\n  }\n};\n//SLIDER\nconst orderSlider = (currentOrder = [null, 1, 2, 3, 4, 5, 6, 7, 8], action) => {\n  if (action.type === \"RANDOMIZE_ORDER__SLIDER\") {\n    return randomize(action.payload.order);\n  } else if (action.type === \"MOVE_PIECE__SLIDER\") {\n    return movePiece(action.payload.order, action.payload.piece);\n  } else {\n    return currentOrder;\n  }\n};\n//MEMO\nconst boardSizeMemo = (gameSize = 6, action) => {\n  if (action.type === \"SET_BOARD_SIZE__MEMO\") {\n    return action.payload.size;\n  } else {\n    return gameSize;\n  }\n};\nconst orderMemo = (currentOrder = [], action) => {\n  if (action.type === \"SET_NEW_ORDER__MEMO\") {\n    return [...Array(action.payload.size).keys()].concat([\n      ...Array(action.payload.size).keys()\n    ]);\n  } else if (action.type === \"RANDOMIZE_ORDER__MEMO\") {\n    return randomize(currentOrder);\n  } else {\n    return currentOrder;\n  }\n};\nconst pairMemo = (pair = {}, action) => {\n  if (action.type === \"SET_PAIR__MEMO\") {\n    return action.payload.pair;\n  }\n  if (action.type === \"RESET_PAIR__MEMO\") {\n    return {};\n  } else {\n    return pair;\n  }\n};\n//BARK\nconst orderBark = (currentOrder = [], action) => {\n  if (action.type === \"SET_NEW_ORDER__BARK\") {\n    return [...Array(action.payload.level + 2).keys()];\n  } else if (action.type === \"ADD_TO_ORDER__BARK\") {\n    return currentOrder.concat(action.payload.newOrder);\n  } else if (action.type === \"RANDOMIZE_ORDER__BARK\") {\n    return randomize(currentOrder);\n  } else {\n    return currentOrder;\n  }\n};\nconst guessedSeqBark = (guess = [], action) => {\n  if (action.type === \"ADD_TO_SEQ__BARK\") {\n    return guess; //.concat(action.payload.guess) ?? whyy. how does that work?\n  } else if (action.type === \"RESET_SEQ__BARK\") {\n    return [];\n  } else {\n    return guess;\n  }\n};\n\nexport default combineReducers({\n  time: timer,\n  timeWhenStopped: timeWhenStopped,\n  points: points,\n  moves: moves,\n  level: level,\n  orderSlider: orderSlider,\n  boardSizeMemo: boardSizeMemo,\n  orderMemo: orderMemo,\n  pairMemo: pairMemo,\n  orderBark: orderBark,\n  guessedSeqBark: guessedSeqBark\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport reducers from \"./reducers\"; //index.js\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={createStore(reducers)}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}