{"version":3,"sources":["components/Navigation.jsx","components/Sidebar.jsx","audio/audio.mp3","components/Audio.jsx","components/Home.jsx","components/functions.jsx","components/Slider.jsx","components/MemoPiece.jsx","components/MemoMenu.jsx","components/Timer.jsx","components/GameWon.jsx","components/Memo.jsx","components/BarkMenu.jsx","components/BarkPiece.jsx","components/Bark.jsx","components/App.js","index.js"],"names":["Navigation","to","Sidebar","id","className","onClick","document","getElementById","classList","toggle","Audio","state","playing","componentDidMount","audioControl","action","setState","playAudio","a","play","pauseAudio","pause","renderContent","icon","src","alt","Fragment","audio_file","this","Component","Home","newSeqNoR","length","arr","Array","keys","arrCopy","slice","newArr","i","randomIndex","Math","floor","random","push","splice","returnPositions","values","positions","key","shuffleArray","reduce","sum","thisElement","findNull","object","Number","Object","find","findArrows","locationOfNull","arrows","Slider","0","1","2","3","4","5","6","7","8","gameWon","IfGameWon","slidePiece","location","imgToMove","posOfNull","undefined","spot","checkIfGameWon","drawPiece","piece","renderImg","pieceImg","arrow","imgJSX","arrowJSX","renderTheSpot","drawPieces","map","value","resetGame","indexOf","startGame","props","gameIsStarted","yourSequence","JSON","stringify","React","MemoPiece","turn","pieceIsTurned","front","back","pairsFound","includes","turned","setTimeout","MemoMenu","handleChange","handleSubmit","event","preventDefault","onLevelChange","points","onSubmit","type","name","onChange","Timer","time0","timeNow","hours","minutes","seconds","setTime","msPassed","formatState","timer","Date","getTime","timeInterval","setInterval","time1","oldProps","newProps","timeWhenStopped","clearInterval","GameWon","handleClose","timeWhenWon","Memo","boardSize","gameIsWon","posValues","concat","addPoints","pairIsFound","changeState","drawBoard","index","time","handleMessageClose","BarkMenu","difficulty","level","playSequence","BarkPiece","playBark","add","remove","pieceIsClicked","Bark","sequence","forEach","el","addNewGuess","thisPiece","guessSequence","guessSeq","updateDifficulty","newDifficulty","makeNewSequence","originalSequence","console","log","querySelector","textContent","newSequence","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.5238748e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Navigation.css\";\n\nconst Navigation = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/slider\">Slider</Link>\n        </li>\n        <li>\n          <Link to=\"/memo\">Memo</Link>\n        </li>\n        <li>\n          <Link to=\"/bark\">Bark</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nimport \"./Sidebar.css\";\n\nconst Sidebar = () => {\n  return (\n    <div id=\"sidebar\" className=\"hidden\">\n      <button\n        className=\"sidebar--button\"\n        onClick={() => {\n          document.getElementById(\"sidebar\").classList.toggle(\"hidden\");\n        }}\n      >\n        >>\n      </button>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","export default __webpack_public_path__ + \"static/media/audio.effbdda4.mp3\";","import React, { Component } from \"react\";\nimport audio_file from \"../audio/audio.mp3\";\n//Music: https://www.bensound.com\n\nclass Audio extends Component {\n  state = { playing: false };\n  componentDidMount = () => {};\n\n  audioControl = action => {\n    if (action === \"play\") {\n      this.setState({ playing: true });\n    } else if (action === \"pause\") {\n      this.setState({ playing: false });\n    }\n  };\n  playAudio = async () => {\n    await document.getElementById(\"audio--file\").play();\n  };\n  pauseAudio = async () => {\n    await document.getElementById(\"audio--file\").pause();\n  };\n  renderContent = () => {\n    let icon;\n    if (this.state.playing === true) {\n      icon = \"pause\";\n      this.playAudio();\n    } else {\n      icon = \"play\";\n      //this.pauseAudio(); //can't happen onLoad\n    }\n    return (\n      <img\n        src={`../img/${icon}.png`}\n        alt={icon}\n        onClick={() => {\n          this.audioControl(icon);\n        }}\n      />\n    );\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <audio id=\"audio--file\" src={audio_file} />\n        <div id=\"audio\">{this.renderContent()}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Audio;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"board\" id=\"board__empty\">\n      <h1>Welcome. Please choose your game.</h1>\n      <ul>\n        <li>\n          <Link to=\"/slider\">Slider</Link>\n        </li>\n        <li>\n          <Link to=\"/memo\">Memo</Link>\n        </li>\n        <li>\n          <Link to=\"/bark\">Bark</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n","export function newSeqNoR(length) {\n  /* Returns an array of [0,...,length-1] - no repeats */\n\n  let arr = [...Array(length).keys()]; //for iteration\n  let arrCopy = arr.slice(); //for operation: deep copy\n  let newArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let randomIndex = Math.floor(Math.random() * arrCopy.length);\n    newArr.push(arrCopy[randomIndex]); //push random number to array\n    arrCopy.splice(randomIndex, 1);\n  }\n  return newArr;\n}\nexport function returnPositions(keys, values) {\n  //Returns an object from two arrays\n\n  let positions = {};\n  for (let key of keys) {\n    positions[key] = values[key];\n  }\n  return positions;\n}\nexport function randomPositions(length) {\n  /* Returns an object with random positions */\n\n  let positions = {};\n  const randomArr = newSeqNoR(length);\n  for (let i = 0; i < length; i++) {\n    positions[i] = randomArr[i];\n  }\n  return positions;\n}\nexport function shuffleArray(arr) {\n  let random = newSeqNoR(arr.length);\n  let newArr = random.reduce(function(sum, thisElement) {\n    sum.push(arr[thisElement]);\n    return sum;\n  }, []);\n\n  return newArr;\n}\n\nexport function ValidateOrder(correctArr, checkArr) {\n  if (JSON.stringify(correctArr) === JSON.stringify(checkArr)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function findNull(object) {\n  //Returns key for which object[key] === null\n  let locationOfNull = Number(\n    Object.keys(Object.values(object)).find(\n      key => Object.values(object)[key] === null\n    )\n  );\n  return locationOfNull;\n}\n\nexport function findArrows(locationOfNull) {\n  let arrows = {};\n  if (locationOfNull < 6) {\n    arrows[locationOfNull + 3] = \"up\";\n  }\n  if (locationOfNull > 2) {\n    arrows[locationOfNull - 3] = \"down\";\n  }\n  if (locationOfNull !== 2 && locationOfNull !== 5 && locationOfNull !== 8) {\n    arrows[locationOfNull + 1] = \"left\";\n  }\n  if (locationOfNull !== 0 && locationOfNull !== 3 && locationOfNull !== 6) {\n    arrows[locationOfNull - 1] = \"right\";\n  }\n  return arrows;\n}\n","import React from \"react\";\nimport \"./Slider.css\";\nimport {\n  findNull,\n  findArrows,\n  shuffleArray,\n  returnPositions\n} from \"./functions\";\n\nclass Slider extends React.Component {\n  state = {\n    //positions: { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8 },\n    positions: { 0: 0, 1: 1, 2: null, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8 },\n    arrows: {},\n    gameWon: false\n  };\n\n  IfGameWon = () => {\n    //this.props.gameIsWon(true);\n  };\n  checkIfGameWon() {\n    let yourSequence = Object.values(this.state.positions);\n    let correctSequence = [0, 1, null, 3, 4, 5, 6, 7, 8];\n\n    if (JSON.stringify(yourSequence) == JSON.stringify(correctSequence)) {\n      //this.setState({ gameWon: true });\n\n      return true;\n    }\n  }\n  slidePiece = location => {\n    let imgToMove = this.state.positions[location]; //img of piece at location\n    let positions = this.state.positions;\n    let arrows = this.state.arrows;\n    let posOfNull = findNull(positions);\n\n    //if pieceCanBeMoved === true;\n    if (arrows[location] !== undefined) {\n      for (let spot in positions) {\n        if (Number(spot) === location) {\n          positions[spot] = null;\n        } else if (Number(spot) === posOfNull) {\n          positions[spot] = imgToMove;\n        }\n      }\n      posOfNull = findNull(positions);\n      if (!this.checkIfGameWon()) {\n        this.setState({ positions });\n        let arrows = findArrows(posOfNull);\n        this.setState({ arrows });\n      } else {\n        this.setState({\n          positions: { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8 }\n        });\n        this.setState({ arrows: {} });\n      }\n    }\n  };\n\n  drawPiece = (location, piece) => {\n    let renderImg = (piece, arrow = undefined) => {\n      let pieceImg;\n\n      if (piece === null) {\n        pieceImg = \"empty.png\";\n      } else {\n        pieceImg = `${piece}.jpg`;\n      }\n\n      let imgJSX = (\n        <img\n          className=\"board__slider--image\"\n          src={`../img/slider/${pieceImg}`}\n          alt={`piece-${piece}`}\n          key={`img-${piece}`}\n        />\n      );\n      let arrowJSX = (\n        <img\n          className={`board__slider--arrow board__slider--arrow-${arrow}`}\n          alt={`Arrow ${arrow}`}\n          src={`../img/slider/arrow-${arrow}.png`}\n          key={`img-${arrow}`}\n        />\n      );\n\n      if (arrow === undefined) {\n        return imgJSX;\n      } else {\n        return [imgJSX, arrowJSX];\n      }\n    };\n\n    let renderTheSpot = (piece, arrow = undefined) => {\n      return (\n        <div\n          className=\"board__slider--spot\"\n          id={`board__slider--location-${location}`}\n          onClick={() => {\n            this.slidePiece(location);\n          }}\n          key={location}\n        >\n          {renderImg(piece, arrow)}\n        </div>\n      );\n    };\n\n    return renderTheSpot(piece, this.state.arrows[location]);\n  };\n\n  drawPieces = () => {\n    let positionValues = Object.values(this.state.positions);\n    return positionValues.map((value, i) => {\n      return this.drawPiece(i, value);\n    });\n  };\n\n  resetGame = () => {\n    let keys = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    let values = shuffleArray([0, 1, null, 3, 4, 5, 6, 7, 8]);\n    let positions = returnPositions(keys, values);\n    let posOfNull = values.indexOf(null);\n    this.setState({ positions });\n    let arrows = findArrows(posOfNull);\n    this.setState({ arrows });\n  };\n  startGame = () => {\n    this.resetGame();\n    this.props.gameIsStarted(true);\n\n    /* 1. choose a game -> picture is showed as whole\n    2. start the game - timer is started, board is drawn \n    3. onClick - piece is moved if possible. check if game is won\n    4. game is won - stop the timer. show the time */\n\n    return this.drawPieces();\n  };\n  //change buttons into reset and show picture?\n  //or \"block\" the start button\n  //right now they both do the same thing\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"board--nav\">\n          <button className=\"button board--button\" onClick={this.startGame}>\n            Start\n          </button>\n          <button className=\"button board--button\" onClick={this.resetGame}>\n            Reset\n          </button>\n        </div>\n\n        <div className=\"board__slider\">{this.drawPieces()}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Slider;\n","import React, { Component } from \"react\";\n\nclass MemoPiece extends Component {\n  state = {};\n\n  turn = () => {\n    this.props.pieceIsTurned(this.props.id);\n  };\n\n  renderContent = () => {\n    let front = (\n      <img\n        className=\"front\"\n        src=\"img/front.jpg\"\n        onClick={this.turn}\n        alt=\"front\"\n        key={`front-${this.props.piece}`}\n      />\n    );\n    let back = (\n      <img\n        src={`img/${this.props.piece}.jpg`}\n        alt={`${this.props.piece}`}\n        key={this.props.id}\n      />\n    );\n    if (this.props.pairsFound.includes(this.props.piece)) {\n      //this piece has been found\n      //time delay not working here\n      setTimeout(() => {\n        return null;\n      }, 1000);\n    } else if (!this.props.turned) {\n      return [front, back];\n    } else {\n      return back;\n    }\n  };\n  render() {\n    return (\n      <div\n        className=\"board-memo__card\"\n        id={`card-${this.props.id}`}\n        key={`card-${this.props.id}`}\n      >\n        {\" \"}\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nexport default MemoPiece;\n","import React, { Component } from \"react\";\n\nclass MemoMenu extends Component {\n  state = { value: 6 };\n  handleChange = value => {\n    this.setState({ value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onLevelChange(this.state.value);\n  };\n\n  render() {\n    return (\n      <div className=\"board-memo--menu\">\n        Points : {this.props.points}\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"radio\"\n            name=\"level\"\n            value={6}\n            onChange={() => this.handleChange(6)}\n          />\n          <label>12 pieces</label>\n\n          <input\n            type=\"radio\"\n            name=\"level\"\n            value=\"8\"\n            onChange={() => this.handleChange(8)}\n          />\n          <label>16 pieces</label>\n\n          <input\n            type=\"radio\"\n            name=\"level\"\n            value=\"10\"\n            onChange={() => this.handleChange(10)}\n          />\n          <label>20 pieces</label>\n\n          <input className=\"board--button\" type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MemoMenu;\n","import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  state = { time0: 0, timeNow: 0, hours: 0, minutes: 0, seconds: 0 };\n  timeInterval;\n\n  setTime = timeNow => {\n    let msPassed = timeNow - this.state.time0;\n    let hours = Math.floor(msPassed / 1000 / 60 / 60);\n    let minutes = Math.floor((msPassed / 1000 / 60) % 60);\n    if (this.state.seconds >= 59) {\n      this.setState({ seconds: -1 });\n    }\n    let seconds = this.state.seconds + 1; //floor is wrong sometimes\n    //let seconds = Math.floor((msPassed / 1000) % 60);\n    this.setState({ hours, minutes, seconds });\n    this.setState({\n      timeNow: this.formatState(\n        this.state.hours,\n        this.state.minutes,\n        this.state.seconds\n      )\n    });\n  };\n\n  timer = () => {\n    let time0 = new Date().getTime();\n    this.setState({ time0 });\n\n    this.timeInterval = setInterval(() => {\n      let time1 = new Date().getTime();\n      this.setTime(time1);\n    }, 1000);\n  };\n\n  formatState = (hours, minutes, seconds) => {\n    if (hours < 1 && minutes < 1) {\n      return `${seconds} s.`;\n    } else if (hours < 1) {\n      return `${minutes}min. and ${seconds}s.`;\n    } else {\n      return `${hours}h. ${minutes}min. and ${seconds}s.`;\n    }\n  };\n\n  componentDidUpdate(oldProps) {\n    //thx u/charliematters\n    const newProps = this.props;\n    if (oldProps.gameIsStarted !== newProps.gameIsStarted) {\n      if (this.props.gameIsStarted) {\n        this.timer();\n      } else {\n        this.props.timeWhenStopped(this.state.timeNow);\n        clearInterval(this.timeInterval);\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"timer\">{this.state.timeNow}</div>;\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\n\nclass GameWon extends Component {\n  state = {};\n  render() {\n    return (\n      <div\n        className=\"board--message__won\"\n        onClick={() => {\n          this.props.handleClose();\n        }}\n      >\n        <div id=\"you-won\">\n          Congratulations! You won in {this.props.timeWhenWon}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameWon;\n","import React, { Component } from \"react\";\nimport { newSeqNoR } from \"./functions\";\nimport \"./Memo.css\";\nimport MemoPiece from \"./MemoPiece\";\nimport MemoMenu from \"./MemoMenu\";\nimport { returnPositions } from \"./functions\";\nimport Timer from \"./Timer\";\nimport GameWon from \"./GameWon\";\n\nclass Memo extends Component {\n  state = {\n    points: 0,\n    boardSize: 0,\n    positions: {}, //card-id:img\n    turned: [], //by id\n    pairsFound: [], //by img\n    gameIsStarted: false,\n    gameIsWon: false,\n    timeWhenStopped: 0\n  };\n\n  onLevelChange = value => {\n    this.setState({ boardSize: value });\n    let posValues = newSeqNoR(value).concat(newSeqNoR(value));\n    let posKeys = [...Array(value * 2).keys()]; //crates an array for range(0,value)\n    let positions = returnPositions(posKeys, posValues);\n    this.setState({ positions });\n    this.setState({ gameIsStarted: true });\n  };\n  addPoints = () => {\n    let points = this.state.points + 100;\n    this.setState({ points });\n  };\n  pairIsFound = id => {\n    let positions = this.state.positions;\n    let pairsFound = this.state.pairsFound;\n    pairsFound.push(positions[id]);\n    this.addPoints();\n    this.setState({ turned: [] });\n    this.setState({ pairsFound });\n\n    if (this.state.pairsFound.length === this.state.boardSize) {\n      this.setState({ gameIsWon: true });\n      this.setState({ gameIsStarted: false });\n      this.setState({ boardSize: 0 });\n    }\n  };\n  changeState = id => {\n    let turned = this.state.turned;\n    let positions = this.state.positions;\n\n    if (turned.length < 2) {\n    } else if (positions[turned[0]] !== positions[turned[1]]) {\n      setTimeout(() => {\n        this.setState({ turned: [] });\n      }, 1500);\n    } else if (positions[turned[0]] === positions[turned[1]]) {\n      setTimeout(() => {\n        this.pairIsFound(id);\n      }, 1500);\n    }\n  };\n  pieceIsTurned = id => {\n    //done like this because otherwise state did not update\n    if (this.state.turned.length < 2) {\n      this.setState({ turned: [...this.state.turned, id] }, () => {\n        this.changeState(id);\n      });\n    }\n  };\n\n  drawBoard = () => {\n    let pieces = Object.values(this.state.positions);\n    return pieces.map((piece, index) => {\n      return (\n        <MemoPiece\n          pieceIsTurned={this.pieceIsTurned}\n          piece={piece}\n          id={index}\n          key={index}\n          turned={\n            index === this.state.turned[0] || index === this.state.turned[1]\n              ? true\n              : false\n          }\n          pairsFound={this.state.pairsFound}\n        />\n      );\n    });\n  };\n\n  timeWhenStopped = time => {\n    this.setState({ timeWhenStopped: time });\n  };\n  handleMessageClose = () => {\n    this.setState({ gameIsWon: false });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MemoMenu\n          points={this.state.points}\n          onLevelChange={this.onLevelChange}\n        />\n        <div className=\"board-memo\">\n          {this.state.boardSize > 0 ? this.drawBoard() : null}\n        </div>\n        <Timer\n          gameIsStarted={this.state.gameIsStarted}\n          timeWhenStopped={this.timeWhenStopped}\n        />\n        {this.state.gameIsWon ? (\n          <GameWon\n            handleClose={this.handleMessageClose}\n            timeWhenWon={this.state.timeWhenStopped}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Memo;\n","import React, { Component } from \"react\";\n\nclass BarkMenu extends Component {\n  state = { difficulty: 3, level: 1 };\n\n  render() {\n    return (\n      <React.Fragment>\n        Points : {this.props.points}\n        <h2>Level {this.state.difficulty - 2} </h2>\n        <div className=\"board--menu\">\n          <button className=\"board--button\" onClick={this.props.startGame}>\n            Start new game\n          </button>\n          <button className=\"board--button\" onClick={this.props.playSequence}>\n            Play again\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BarkMenu;\n","import React, { Component } from \"react\";\n\nclass BarkPiece extends Component {\n  state = {};\n\n  //play bark when this.props.playing = true\n  componentDidUpdate(oldProps) {\n    //thx u/charliematters\n\n    const newProps = this.props;\n    if (oldProps.playing !== newProps.playing) {\n      if (this.props.playing) {\n        this.playBark();\n      } else {\n      }\n    }\n  }\n  playBark = () => {\n    //maybe do this with animation???\n    let piece = this.props.pieceImg;\n\n    document\n      .getElementById(`board--piece__puppy-${piece}`)\n      .classList.add(\n        `board--piece__puppy__playing`,\n        `board--piece__puppy__playing-${piece}`\n      );\n    let audio = new Audio(`../audio/bark/${piece}.mp3`);\n    audio.play();\n    setTimeout(function() {\n      document\n        .getElementById(`board--piece__puppy-${piece}`)\n        .classList.remove(\n          `board--piece__puppy__playing`,\n          `board--piece__puppy__playing-${piece}`\n        );\n    }, 1000);\n  };\n\n  pieceIsClicked = () => {\n    //play piece => color and audio\n    this.playBark(this.props.pieceImg);\n  };\n  render() {\n    return (\n      <img\n        id={`board--piece__puppy-${this.props.pieceImg}`}\n        className=\"board--piece__puppy\"\n        src={`../img/${this.props.pieceImg}.jpg`}\n        alt=\"puppy\"\n        key={this.props.pieceImg}\n        onClick={() => {\n          this.pieceIsClicked(this.pieceIsClicked);\n        }}\n      />\n    );\n  }\n}\n\nexport default BarkPiece;\n","import React, { Component } from \"react\";\nimport \"./Bark.css\";\nimport { newSeqNoR } from \"./functions\";\nimport Timer from \"./Timer\";\nimport GameWon from \"./GameWon\";\nimport BarkMenu from \"./BarkMenu\";\nimport BarkPiece from \"./BarkPiece\";\n\nclass Bark extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      level: 1,\n      sequence: [],\n      guessSeq: [],\n      playing: null,\n      gameIsStarted: false,\n      gameIsWon: false,\n      timeWhenStopped: 0\n    };\n  }\n\n  makeNewSequence() {\n    let newSequence = newSeqNoR(this.state.difficulty);\n    this.setState({ sequence: newSequence });\n  }\n\n  playSequence = () => {\n    //this.playBark = this.playBark.bind(this);\n    let sequence = this.state.sequence;\n\n    sequence.forEach(\n      (el, i) =>\n        setTimeout(() => {\n          this.setState({ playing: el });\n        }, 2000 * i + 1000) //wth\n    );\n    this.setState({ playing: null });\n  };\n\n  addNewGuess = thisPiece => {\n    let guessSequence = this.state.guessSeq;\n    guessSequence.push(thisPiece);\n    this.setState({ guessSeq: guessSequence });\n  };\n\n  updateDifficulty = () => {\n    let newDifficulty = this.state.difficulty + 1;\n    if (newDifficulty === 6) {\n      this.setState({ gameIsWon: true });\n    } else {\n      this.setState({ difficulty: newDifficulty });\n    }\n  };\n\n  startGame = () => {\n    //Creates a new random sequence\n    this.makeNewSequence();\n    this.setState({ gameIsStarted: true }); //starts timer\n    //play the new sequence\n    this.playSequence();\n  };\n\n  pieceIsClicked = piece => {\n    let originalSequence = this.state.sequence;\n\n    //add guess to guessing sequence\n    this.addNewGuess(piece);\n    let guessSequence = this.state.guessSeq;\n\n    //check if this guess is correct\n    if (originalSequence[guessSequence.length - 1] === piece) {\n      console.log(\"correct\");\n      //check if the whole sequence is guessed\n      if (guessSequence.length === originalSequence.length) {\n        document.querySelector(\"h2\").textContent = \"Good\";\n        setTimeout(() => {\n          document.querySelector(\"h2\").textContent = `Level ${this.state\n            .difficulty - 2}`;\n        }, 2000);\n        //update difficulty\n        this.updateDifficulty();\n        //start new game after 2s\n        setTimeout(this.startGame, 2000);\n      }\n    } else {\n      //this guess is wrong\n      console.log(\"wrong\");\n      this.setState({ guessSeq: [] });\n      this.playSequence();\n    }\n  };\n\n  drawBoard = () => {\n    let pieces = [...Array(this.state.difficulty).keys()];\n    return pieces.map(el =>\n      el === this.state.playing ? (\n        <BarkPiece\n          playing={true}\n          pieceImg={el}\n          pieceIsClicked={this.pieceIsClicked}\n          key={el}\n        />\n      ) : (\n        <BarkPiece\n          playing={false}\n          pieceImg={el}\n          pieceIsClicked={this.pieceIsClicked}\n          key={el}\n        />\n      )\n    );\n  };\n\n  componentDidMount() {\n    this.makeNewSequence();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <BarkMenu\n          points={this.state.points}\n          onLevelChange={this.onLevelChange}\n          startGame={this.startGame}\n          playSequence={this.playSequence}\n        />\n        <div className=\"board--pieces__bark\">{this.drawBoard()}</div>\n        <Timer\n          gameIsStarted={this.state.gameIsStarted}\n          timeWhenStopped={this.timeWhenStopped}\n        />\n        {this.state.gameIsWon ? (\n          <GameWon\n            handleClose={this.handleMessageClose}\n            timeWhenWon={this.state.timeWhenStopped}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Bark;\n","import React, { Component } from \"react\";\nimport { Switch } from \"react-router\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Navigation from \"./Navigation\";\nimport Sidebar from \"./Sidebar\";\nimport Audio from \"./Audio\";\n\nimport Home from \"./Home\";\nimport Slider from \"./Slider\";\nimport Memo from \"./Memo\";\nimport Bark from \"./Bark\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Audio />\n        <Navigation />\n        <Sidebar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/slider\" component={Slider} />\n          <Route path=\"/memo\" component={Memo} />\n          <Route path=\"/bark\" component={Bark} />\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n//<Board gameChoice={this.gameChoice} game={this.state.game} />\n/*\nTo do:\nFix the Css / implement Sass\nMake a logo\nfigure out what's going on with grid at 1200+ screen\nNav Bar: instructions? Or choice for theme/music and picture\nAll games: Add messages (and points?) when won\nAdd lifecycle functions\nMaybe: add more picture options\nSlider: refactor refactor refactor\nesp. fix posOfNull or write a shuffle function instead\nadd listener for keyboard arrows\nalternative to the empty/null piece\ncheck if game is won\nMemo: implement\nBark: Fix the timing issues and block clicking while sequence is playing\nTimer: Finish implementing for all games, add saving time\nPoints: ?\nMusic: add icons and audio playing features\nThemes: ?\n\nOther possible games: connect the pipes\n\ndone:\nRouting \n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}